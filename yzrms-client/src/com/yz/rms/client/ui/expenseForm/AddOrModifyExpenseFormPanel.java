/*
 * AddOrModifyExpenseFormPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-08-31 12:19:02
 */
package com.yz.rms.client.ui.expenseform;

import com.nazca.ui.JDatePicker;
import com.nazca.ui.NComponentStyleTool;
import com.nazca.ui.NInternalDiag;
import com.nazca.ui.NLabelMessageTool;
import com.nazca.ui.laf.NTitledRoundSideUI;
import com.nazca.ui.model.SimpleObjectListModel;
import com.nazca.usm.client.util.JTextFieldLimit;
import com.nazca.util.StringUtil;
import com.vsd.client.util.RightDefaultValueTextFieldBorder;
import com.yz.rms.client.ClientContext;
import com.yz.rms.client.agent.expenseform.CreateExpenseFormAgent;
import com.yz.rms.client.agent.expenseform.ModifyExpenseFormAgent;
import com.yz.rms.client.agent.expenseform.QueryAllProjectAgent;
import com.yz.rms.client.listener.AgentListener;
import com.yz.rms.client.util.ResourceUtil;
import com.yz.rms.common.enums.ExpenseFormStateEnums;
import com.yz.rms.common.enums.RecordState;
import com.yz.rms.common.model.ExpenseForm;
import com.yz.rms.common.model.Project;
import com.yz.rms.common.model.wrap.ExpenseFormWrap;
import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;

/**
 *
 * @author Hu Qin<huqin@yzhtech.com>
 */
public class AddOrModifyExpenseFormPanel extends javax.swing.JPanel {

    private boolean addMode;
    private ExpenseForm expenseForm;
    private CreateExpenseFormAgent createExpenseFormAgent;
    private ModifyExpenseFormAgent modifyExpenseFormAgent;
    private QueryAllProjectAgent queryAllProjectAgent = null;
    private SimpleObjectListModel<Project> projectComboxModel
            = new SimpleObjectListModel<>();
    private SimpleObjectListModel<Project> projectComboxModel1
            = new SimpleObjectListModel<>();
    private ExpenseFormWrap curExpenseFormWrap;
    private ExpenseForm curexpenseForm;
    private Project project = null;

    public AddOrModifyExpenseFormPanel() {
    }

    public AddOrModifyExpenseFormPanel(
            SimpleObjectListModel<Project> projectComboxModel) {
        this.projectComboxModel = projectComboxModel;
        initComponents();
        jPanel6.setUI(new NTitledRoundSideUI("报销单详情"));
        jPanel2.setUI(new NTitledRoundSideUI("报销金额详情"));
        initAgentAndListener();
        initmodel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        projectNameItem = new javax.swing.JComboBox();
        attachmentCountTxFd = new javax.swing.JTextField();
        expenseTime = new com.nazca.ui.JDatePicker();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cityTrafficTxFd = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        officeSuppliesTxFd = new javax.swing.JTextField();
        spacePageTxFd = new javax.swing.JTextField();
        conferencesTxFd = new javax.swing.JTextField();
        telephoneBillTxFd = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        booksMaterialsTxFd = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cityGasolineTxFd = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        postageTxFd = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        fieldOperationTxFd = new javax.swing.JTextField();
        travelAccoTxFd = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        copyBindTxFd = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        entertainTxFd = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        travelTrafTxFd = new javax.swing.JTextField();
        travelMealsTxFd = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        materialTxFd = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        trainTxFd = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        travelAllowanceTxFd = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        nActionPane1 = new com.yz.rms.client.ui.NActionPane2();
        cancelBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        saveAndCommitBtn = new javax.swing.JButton();
        totalTxFd = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new com.nazca.ui.layout.BoxLayout2());

        jPanel6.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));

        jLabel1.setText("项目名称：");

        jLabel2.setText("报销时间：");

        jLabel3.setText("附件：");

        projectNameItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(projectNameItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(expenseTime, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(attachmentCountTxFd, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(projectNameItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(expenseTime, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(attachmentCountTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 10, 10));

        jLabel4.setText("市内交通：");

        jLabel12.setText("办公用品费：");

        jLabel13.setText("电话费：");

        jLabel5.setText("图书资料：");

        jLabel6.setText("市内汽油费：");

        jLabel7.setText("邮费：");

        jLabel20.setText("外勤费：");

        jLabel15.setText("出差住宿费：");

        jLabel8.setText("复印装订费：");

        jLabel9.setText("室内招待费：");

        jLabel16.setText("出差交通费：");

        jLabel17.setText("出差餐费：");

        jLabel10.setText("材料费：");

        jLabel11.setText("培训费：");

        jLabel18.setText("差旅补助：");

        travelAllowanceTxFd.setPreferredSize(new java.awt.Dimension(73, 21));

        jLabel14.setText("版面费：");

        jLabel19.setText("会议费：");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(booksMaterialsTxFd, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                    .addComponent(cityGasolineTxFd)
                    .addComponent(copyBindTxFd)
                    .addComponent(entertainTxFd)
                    .addComponent(materialTxFd)
                    .addComponent(trainTxFd)
                    .addComponent(cityTrafficTxFd))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(telephoneBillTxFd, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                    .addComponent(postageTxFd)
                    .addComponent(travelAccoTxFd)
                    .addComponent(travelTrafTxFd)
                    .addComponent(travelMealsTxFd)
                    .addComponent(officeSuppliesTxFd)
                    .addComponent(travelAllowanceTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conferencesTxFd, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                    .addComponent(fieldOperationTxFd)
                    .addComponent(spacePageTxFd))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel4)
                    .addComponent(cityTrafficTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(officeSuppliesTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(spacePageTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(booksMaterialsTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(telephoneBillTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(conferencesTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(cityGasolineTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(postageTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(fieldOperationTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel8)
                    .addComponent(copyBindTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(travelAccoTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel9)
                    .addComponent(entertainTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(travelTrafTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel10)
                    .addComponent(materialTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(travelMealsTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel11)
                    .addComponent(trainTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(travelAllowanceTxFd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2);

        add(jPanel1, java.awt.BorderLayout.NORTH);

        cancelBtn.setText("取消");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });
        nActionPane1.add(cancelBtn);

        saveBtn.setText("保存");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        nActionPane1.add(saveBtn);

        saveAndCommitBtn.setText("保存并提交");
        saveAndCommitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAndCommitBtnActionPerformed(evt);
            }
        });
        nActionPane1.add(saveAndCommitBtn);

        totalTxFd.setEditable(false);
        totalTxFd.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        totalTxFd.setMinimumSize(new java.awt.Dimension(100, 21));
        totalTxFd.setName(""); // NOI18N
        totalTxFd.setPreferredSize(new java.awt.Dimension(100, 21));
        nActionPane1.add(totalTxFd);

        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel21.setText("总计：");
        nActionPane1.add(jLabel21);

        add(nActionPane1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void saveAndCommitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAndCommitBtnActionPerformed
        if (isFormValid()) {
            expenseForm = setTextValToExp();
            expenseForm.setState(ExpenseFormStateEnums.waitAuditForPm);
            if (addMode) {
                expenseForm.setExpenseId(UUID.randomUUID().toString());
                expenseForm.setExpensePersonId(ClientContext.getUserId());
                expenseForm.setCreator(ClientContext.getUserId());
                createExpenseFormAgent.setParameter(expenseForm);
                createExpenseFormAgent.start();
            } else {
                modifyExpenseFormAgent.setParameter(expenseForm);
                modifyExpenseFormAgent.start();
            }
        }
    }//GEN-LAST:event_saveAndCommitBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        if (isFormValid()) {
            expenseForm = setTextValToExp();
            expenseForm.setState(ExpenseFormStateEnums.newForm);
            if (addMode) {
                expenseForm.setExpenseId(UUID.randomUUID().toString());
                expenseForm.setExpensePersonId(ClientContext.getUserId());
                expenseForm.setCreator(ClientContext.getUserId());
                createExpenseFormAgent.setParameter(expenseForm);
                createExpenseFormAgent.start();
            } else {
                modifyExpenseFormAgent.setParameter(expenseForm);
                modifyExpenseFormAgent.start();
            }
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        NInternalDiag<ExpenseForm, JComponent> diag = NInternalDiag.
                findNInternalDiag(AddOrModifyExpenseFormPanel.this);
        diag.hideDiag();
    }//GEN-LAST:event_cancelBtnActionPerformed

    public void initPanelContent(ExpenseFormWrap curExpenseFormWrap) {
        this.curExpenseFormWrap = curExpenseFormWrap;
        curexpenseForm = curExpenseFormWrap.getExpenseForm();

        if (curexpenseForm.getAttachmentCount() != 0) {
            attachmentCountTxFd.setText(Integer.toString(curexpenseForm.
                    getAttachmentCount()));
        }
        if (curexpenseForm.getBooksMaterials() != null) {
            booksMaterialsTxFd.setText(Double.toString(curexpenseForm.
                    getBooksMaterials()));
        }
        if (curexpenseForm.getCityGasoline() != null) {
            cityGasolineTxFd.setText(Double.toString(curexpenseForm.
                    getCityGasoline()));
        }
        if (curexpenseForm.getCityTraffic() != null) {
            cityTrafficTxFd.setText(Double.toString(curexpenseForm.
                    getCityTraffic()));
        }
        if (curexpenseForm.getConferences() != null) {
            conferencesTxFd.setText(Double.toString(curexpenseForm.
                    getConferences()));
        }
        if (curexpenseForm.getCopyBind() != null) {
            copyBindTxFd.setText(Double.toString(curexpenseForm.getCopyBind()));
        }
        if (curexpenseForm.getEntertain() != null) {
            entertainTxFd.
                    setText(Double.toString(curexpenseForm.getEntertain()));
        }
        if (curexpenseForm.getFieldOperation() != null) {
            fieldOperationTxFd.setText(Double.toString(curexpenseForm.
                    getFieldOperation()));
        }
        if (curexpenseForm.getMaterial() != null) {
            materialTxFd.setText(Double.toString(curexpenseForm.getMaterial()));
        }
        if (curexpenseForm.getOfficeSupplies() != null) {
            officeSuppliesTxFd.setText(Double.toString(curexpenseForm.
                    getOfficeSupplies()));
        }
        if (curexpenseForm.getPostage() != null) {
            postageTxFd.setText(Double.toString(curexpenseForm.getPostage()));
        }
        if (curexpenseForm.getSpacePage() != null) {
            spacePageTxFd.
                    setText(Double.toString(curexpenseForm.getSpacePage()));
        }
        if (curexpenseForm.getTelephoneBill() != null) {
            telephoneBillTxFd.setText(Double.toString(curexpenseForm.
                    getTelephoneBill()));
        }
        if (curexpenseForm.getTrain() != null) {
            trainTxFd.setText(Double.toString(curexpenseForm.getTrain()));
        }
        if (curexpenseForm.getTravelAccommodation() != null) {
            travelAccoTxFd.setText(Double.toString(curexpenseForm.
                    getTravelAccommodation()));
        }
        if (curexpenseForm.getTravelAllowance() != null) {
            travelAllowanceTxFd.setText(Double.toString(curexpenseForm.
                    getTravelAllowance()));
        }
        if (curexpenseForm.getTravelMeals() != null) {
            travelMealsTxFd.setText(Double.toString(curexpenseForm.
                    getTravelMeals()));
        }
        if (curexpenseForm.getTravelTraffic() != null) {
            travelTrafTxFd.setText(Double.toString(curexpenseForm.
                    getTravelTraffic()));
        }
        if (curexpenseForm.getExpenseTotal() != null) {
            totalTxFd.setText(Double.toString(curexpenseForm.
                    getExpenseTotal()));
        }
        expenseTime.setSelectedDate(curexpenseForm.getExpenseTime());
        for (Project proj : projectComboxModel.getObjectList()) {
            if (proj.getProjectId().equals(curexpenseForm.getProjectId())) {
                project = proj;
                break;
            }
        }
        projectComboxModel.setSelectedItem(project);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    public void setAddMode(boolean addMode) {
        this.addMode = addMode;
    }

    private void initAgentAndListener() {
        createExpenseFormAgent = new CreateExpenseFormAgent();
        createExpenseFormAgent.addListener(createExpenseFormAgentListener);
        modifyExpenseFormAgent = new ModifyExpenseFormAgent();
        modifyExpenseFormAgent.addListener(createExpenseFormAgentListener);
        queryAllProjectAgent = new QueryAllProjectAgent();
        queryAllProjectAgent.addListener(queyProjectAgentLis);
        queryAllProjectAgent.start();
        for (int i = 0; i
                < jPanel2.getComponents().length; i++) {
            Object obj = jPanel2.getComponent(i);
            if (obj instanceof JTextField) {
                ((JTextField) jPanel2.getComponent(i)).addKeyListener(
                        new TextFieldKeyListener(((JTextField) jPanel2.
                                getComponent(i))));
            }
        }
        attachmentCountTxFd.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char input = e.getKeyChar();
                if (!Character.isDigit(input)) {
                    deleteInputChar(e);
                }
            }
        });
    }

    public ExpenseForm showMe(JComponent parent) {
        NInternalDiag<ExpenseForm, JComponent> diag = null;
        if (addMode == true) {
            diag = new NInternalDiag<>("添加报销单", ResourceUtil.buildImageIcon(
                    "32.png"), this);
        } else {
            diag = new NInternalDiag<>("修改报销单", ResourceUtil.buildImageIcon(
                    "32.png"), this);
        }
        return diag.showInternalDiag(parent,
                NInternalDiag.INIT_SIZE_MODE_PREFERED);
    }

    AgentListener<ExpenseForm> createExpenseFormAgentListener
            = new AgentListener<ExpenseForm>() {
                @Override
                public void onStarted(long seq) {
                    setPanelEnabled(false);
                    nActionPane1.getWaitingProcess().setVisible(true);
                    nActionPane1.getWaitingProcess().setIndeterminate(true);
                    nActionPane1.getMsgLabel().setVisible(true);
                    if (addMode) {
                        NLabelMessageTool.
                        infoMessage(nActionPane1.getMsgLabel(), "正在添加...");
                    } else {
                        NLabelMessageTool.
                        infoMessage(nActionPane1.getMsgLabel(), "正在修改...");
                    }
                }

                @Override
                public void onSucceeded(ExpenseForm result, long seq) {
                    setPanelEnabled(true);
                    nActionPane1.getWaitingProcess().setVisible(false);
                    nActionPane1.getWaitingProcess().setIndeterminate(false);
                    if (addMode) {
                        NLabelMessageTool.goodNewsMessage(nActionPane1.
                                getMsgLabel(), "添加成功");
                    } else {
                        NLabelMessageTool.goodNewsMessage(nActionPane1.
                                getMsgLabel(), "修改成功");
                    }
                    nActionPane1.getMsgLabel().setVisible(true);
                    new Thread() {
                        @Override
                        public void run() {
                            SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    NInternalDiag<ExpenseForm, JComponent> diag
                                    = NInternalDiag.findNInternalDiag(
                                            AddOrModifyExpenseFormPanel.this);
                                    diag.hideDiag(result);
                                }
                            });
                        }
                    }.start();
                }

                @Override
                public void onFailed(String errMsg, int errCode, long seq) {
                    setPanelEnabled(true);
                    nActionPane1.getWaitingProcess().setVisible(false);
                    nActionPane1.getWaitingProcess().setIndeterminate(false);
                    NLabelMessageTool.errorMessage(nActionPane1.getMsgLabel(),
                            errCode, errMsg);
                    nActionPane1.getMsgLabel().setVisible(true);
                }
            };
    
     private final AgentListener<List<Project>> queyProjectAgentLis
	    = new AgentListener<List<Project>>() {
	@Override
	public void onStarted(long seq) {
	}

	@Override
	public void onSucceeded(List<Project> result, long seq) {
	    Collections.reverse(result);
	    projectComboxModel1.setObjectList(result);
            if(projectComboxModel1 != null && projectComboxModel1.getSize() != projectComboxModel.getSize()){
                projectComboxModel.setObjectList(result);
                projectComboxModel.setSelectedItem(project);
            }
            
	}

	@Override
	public void onFailed(String errMsg, int errCode, long seq) {
	}
    };

    private void setPanelEnabled(boolean flag) {
        for (Component col : AddOrModifyExpenseFormPanel.this.
                getComponents()) {
            if (col instanceof JTextField | col instanceof JComboBox
                    | col instanceof JDatePicker) {
                col.setEnabled(flag);
            }
        }
        saveAndCommitBtn.setEnabled(flag);
        saveBtn.setEnabled(flag);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField attachmentCountTxFd;
    private javax.swing.JTextField booksMaterialsTxFd;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTextField cityGasolineTxFd;
    private javax.swing.JTextField cityTrafficTxFd;
    private javax.swing.JTextField conferencesTxFd;
    private javax.swing.JTextField copyBindTxFd;
    private javax.swing.JTextField entertainTxFd;
    private com.nazca.ui.JDatePicker expenseTime;
    private javax.swing.JTextField fieldOperationTxFd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTextField materialTxFd;
    private com.yz.rms.client.ui.NActionPane2 nActionPane1;
    private javax.swing.JTextField officeSuppliesTxFd;
    private javax.swing.JTextField postageTxFd;
    private javax.swing.JComboBox projectNameItem;
    private javax.swing.JButton saveAndCommitBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField spacePageTxFd;
    private javax.swing.JTextField telephoneBillTxFd;
    private javax.swing.JTextField totalTxFd;
    private javax.swing.JTextField trainTxFd;
    private javax.swing.JTextField travelAccoTxFd;
    private javax.swing.JTextField travelAllowanceTxFd;
    private javax.swing.JTextField travelMealsTxFd;
    private javax.swing.JTextField travelTrafTxFd;
    // End of variables declaration//GEN-END:variables
 private ExpenseForm setTextValToExp() throws NumberFormatException {
        if (addMode) {
            expenseForm = new ExpenseForm();
            if (!StringUtil.isEmpty(attachmentCountTxFd.getText())) {
                expenseForm.setAttachmentCount(Integer.parseInt(
                        attachmentCountTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(booksMaterialsTxFd.getText())) {
                expenseForm.setBooksMaterials(Double.parseDouble(
                        booksMaterialsTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(cityGasolineTxFd.getText())) {
                expenseForm.setCityGasoline(Double.parseDouble(cityGasolineTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(cityTrafficTxFd.getText())) {
                expenseForm.setCityTraffic(Double.parseDouble(cityTrafficTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(conferencesTxFd.getText())) {
                expenseForm.setConferences(Double.parseDouble(conferencesTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(copyBindTxFd.getText())) {
                expenseForm.setCopyBind(Double.parseDouble(copyBindTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(entertainTxFd.getText())) {
                expenseForm.
                        setEntertain(Double.parseDouble(entertainTxFd.getText()));
            }
            if (!StringUtil.isEmpty(fieldOperationTxFd.getText())) {
                expenseForm.setFieldOperation(Double.parseDouble(
                        fieldOperationTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(materialTxFd.getText())) {
                expenseForm.setMaterial(Double.parseDouble(materialTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(officeSuppliesTxFd.getText())) {
                expenseForm.setOfficeSupplies(Double.parseDouble(
                        officeSuppliesTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(postageTxFd.getText())) {
                expenseForm.
                        setPostage(Double.parseDouble(postageTxFd.getText()));
            }
            if (!StringUtil.isEmpty(spacePageTxFd.getText())) {
                expenseForm.
                        setSpacePage(Double.parseDouble(spacePageTxFd.getText()));
            }
            if (!StringUtil.isEmpty(telephoneBillTxFd.getText())) {
                expenseForm.setTelephoneBill(Double.parseDouble(
                        telephoneBillTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(trainTxFd.getText())) {
                expenseForm.setTrain(Double.parseDouble(trainTxFd.getText()));
            }
            if (!StringUtil.isEmpty(travelAccoTxFd.getText())) {
                expenseForm.setTravelAccommodation(Double.parseDouble(
                        travelAccoTxFd.getText()));
            }
            if (!StringUtil.isEmpty(travelAllowanceTxFd.getText())) {
                expenseForm.setTravelAllowance(Double.parseDouble(
                        travelAllowanceTxFd.getText()));
            }
            if (!StringUtil.isEmpty(travelMealsTxFd.getText())) {
                expenseForm.setTravelMeals(Double.parseDouble(travelMealsTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(travelTrafTxFd.getText())) {
                expenseForm.setTravelTraffic(Double.parseDouble(travelTrafTxFd.
                        getText()));
            }
            if (!StringUtil.isEmpty(totalTxFd.getText())) {
                expenseForm.setExpenseTotal(Double.parseDouble(totalTxFd.
                        getText()));
            }
        } else {
            expenseForm = curexpenseForm;
            if (!StringUtil.isEmpty(attachmentCountTxFd.getText())) {
                expenseForm.setAttachmentCount(Integer.parseInt(
                        attachmentCountTxFd.
                        getText()));
            } else {
                expenseForm.setAttachmentCount(0);
            }
            if (!StringUtil.isEmpty(booksMaterialsTxFd.getText())) {
                expenseForm.setBooksMaterials(Double.parseDouble(
                        booksMaterialsTxFd.
                        getText()));
            } else {
                expenseForm.setBooksMaterials(null);
            }
            if (!StringUtil.isEmpty(cityGasolineTxFd.getText())) {
                expenseForm.setCityGasoline(Double.parseDouble(cityGasolineTxFd.
                        getText()));
            } else {
                expenseForm.setCityGasoline(null);
            }
            if (!StringUtil.isEmpty(cityTrafficTxFd.getText())) {
                expenseForm.setCityTraffic(Double.parseDouble(cityTrafficTxFd.
                        getText()));
            } else {
                expenseForm.setCityTraffic(null);
            }
            if (!StringUtil.isEmpty(conferencesTxFd.getText())) {
                expenseForm.setConferences(Double.parseDouble(conferencesTxFd.
                        getText()));
            } else {
                expenseForm.setConferences(null);
            }
            if (!StringUtil.isEmpty(copyBindTxFd.getText())) {
                expenseForm.setCopyBind(Double.parseDouble(copyBindTxFd.
                        getText()));
            } else {
                expenseForm.setCopyBind(null);
            }
            if (!StringUtil.isEmpty(entertainTxFd.getText())) {
                expenseForm.setEntertain(Double.parseDouble(entertainTxFd.
                        getText()));
            } else {
                expenseForm.setEntertain(null);
            }
            if (!StringUtil.isEmpty(fieldOperationTxFd.getText())) {
                expenseForm.setFieldOperation(Double.parseDouble(
                        fieldOperationTxFd.
                        getText()));
            } else {
                expenseForm.setFieldOperation(null);
            }
            if (!StringUtil.isEmpty(materialTxFd.getText())) {
                expenseForm.setMaterial(Double.parseDouble(materialTxFd.
                        getText()));
            } else {
                expenseForm.setMaterial(null);
            }
            if (!StringUtil.isEmpty(officeSuppliesTxFd.getText())) {
                expenseForm.setOfficeSupplies(Double.parseDouble(
                        officeSuppliesTxFd.
                        getText()));
            } else {
                expenseForm.setOfficeSupplies(null);
            }
            if (!StringUtil.isEmpty(postageTxFd.getText())) {
                expenseForm.
                        setPostage(Double.parseDouble(postageTxFd.getText()));
            } else {
                expenseForm.setPostage(null);
            }
            if (!StringUtil.isEmpty(spacePageTxFd.getText())) {
                expenseForm.
                        setSpacePage(Double.parseDouble(spacePageTxFd.getText()));
            } else {
                expenseForm.setSpacePage(null);
            }
            if (!StringUtil.isEmpty(telephoneBillTxFd.getText())) {
                expenseForm.setTelephoneBill(Double.parseDouble(
                        telephoneBillTxFd.
                        getText()));
            } else {
                expenseForm.setTelephoneBill(null);
            }
            if (!StringUtil.isEmpty(trainTxFd.getText())) {
                expenseForm.setTrain(Double.parseDouble(trainTxFd.getText()));
            } else {
                expenseForm.setTrain(null);
            }
            if (!StringUtil.isEmpty(travelAccoTxFd.getText())) {
                expenseForm.setTravelAccommodation(Double.parseDouble(
                        travelAccoTxFd.getText()));
            } else {
                expenseForm.setTravelAccommodation(null);
            }
            if (!StringUtil.isEmpty(travelAllowanceTxFd.getText())) {
                expenseForm.setTravelAllowance(Double.parseDouble(
                        travelAllowanceTxFd.getText()));
            } else {
                expenseForm.setTravelAllowance(null);
            }
            if (!StringUtil.isEmpty(travelMealsTxFd.getText())) {
                expenseForm.setTravelMeals(Double.parseDouble(travelMealsTxFd.
                        getText()));
            } else {
                expenseForm.setTravelMeals(null);
            }
            if (!StringUtil.isEmpty(travelTrafTxFd.getText())) {
                expenseForm.setTravelTraffic(Double.parseDouble(travelTrafTxFd.
                        getText()));
            } else {
                expenseForm.setTravelTraffic(null);
            }
            if (!StringUtil.isEmpty(totalTxFd.getText())) {
                expenseForm.setExpenseTotal(Double.parseDouble(totalTxFd.
                        getText()));
            }
        }
        expenseForm.setProjectId(projectComboxModel.getSelectedItem().getProjectId());
        expenseForm.setModifier(ClientContext.getUserId());
        expenseForm.setDeleteState(RecordState.normal);
        expenseForm.setExpenseTime(expenseTime.getSelectedDate());
        expenseForm.setPassState(true);
        return expenseForm;
    }

    private boolean isFormValid() {

        if (StringUtil.isEmpty(totalTxFd.getText().trim()) || totalTxFd.
                getText().trim().equals("0.0")) {
            NLabelMessageTool.
                    errorMessage(nActionPane1.getMsgLabel(), "金额不能为空");
            nActionPane1.getMsgLabel().setVisible(true);
            NComponentStyleTool.errorStyle(totalTxFd);
            return false;
        } else if (Double.parseDouble(totalTxFd.getText()) > 999999) {
            NLabelMessageTool.
                    errorMessage(nActionPane1.getMsgLabel(), "总金额超限");
            nActionPane1.getMsgLabel().setVisible(true);
            NComponentStyleTool.errorStyle(totalTxFd);
            return false;
        }

        if (expenseTime.getSelectedDate() == null) {
            NLabelMessageTool.errorMessage(nActionPane1.getMsgLabel(),
                    "时间不能为空");
            nActionPane1.getMsgLabel().setVisible(true);
            NComponentStyleTool.errorStyle(expenseTime);
            return false;
        }
        if (StringUtil.isEmpty(projectNameItem.getSelectedItem().toString().
                trim())) {
            NLabelMessageTool.errorMessage(nActionPane1.getMsgLabel(),
                    "请选择项目名称");
            nActionPane1.getMsgLabel().setVisible(true);
            NComponentStyleTool.errorStyle(projectNameItem);
            return false;
        }
        NComponentStyleTool.normalStyle(totalTxFd);
        NComponentStyleTool.normalStyle(projectNameItem);
        NComponentStyleTool.normalStyle(expenseTime);
        return true;
    }

    private Double getTotal() {
        Double sum = 0.0;
        for (int i = 0; i
                < jPanel2.getComponents().length; i++) {
            Object obj = jPanel2.getComponent(i);
            if (obj instanceof JTextField) {
                if (!StringUtil.isEmpty(
                        ((JTextField) jPanel2.
                        getComponent(i)).getText())) {
                    try {
                        sum = sum + Double.parseDouble(
                                ((JTextField) jPanel2.
                                getComponent(i)).getText());
                    } catch (NumberFormatException e) {
                    }

                }
            }
        }
        if (sum < 999999) {
            NComponentStyleTool.normalStyle(totalTxFd);
        }
        return sum;
    }

    private void initmodel() {
        projectNameItem.setModel(projectComboxModel);
        projectNameItem.setSelectedIndex(0);
        attachmentCountTxFd.setDocument(new JTextFieldLimit(4));
        for (int i = 0; i < jPanel2.getComponents().length; i++) {
            Object obj = jPanel2.getComponent(i);
            if (obj instanceof JTextField) {
                ((JTextField) jPanel2.getComponent(i)).setDocument(
                        new JTextFieldLimit(6));
            }
        }
        nActionPane1.setCompPositoin(jLabel21, LEFT_ALIGNMENT, 0);
        nActionPane1.setCompPositoin(totalTxFd, LEFT_ALIGNMENT, 1);
        RightDefaultValueTextFieldBorder rightBorder
                = new RightDefaultValueTextFieldBorder();
        Border tb4 = attachmentCountTxFd.getBorder();
        if (tb4 != null) {
            attachmentCountTxFd.setBorder(new CompoundBorder(tb4, rightBorder));
        } else {
            attachmentCountTxFd.setBorder(rightBorder);
        }
        rightBorder.setDistrictCode("张");
    }

    class TextFieldKeyListener implements KeyListener {
        JTextField jt;

        public TextFieldKeyListener() {
        }

        public TextFieldKeyListener(JTextField jt) {
            this.jt = jt;
        }

        public void keyPressed(KeyEvent e) {
        }

        public void keyReleased(KeyEvent e) {
            totalTxFd.setText(Double.toString(getTotal()));
        }

        @Override
        public void keyTyped(KeyEvent e) {
            char input = e.getKeyChar();
            if (!(input == '.' || Character.isDigit(input))
                    || (input == '.' && jt.getText().contains("."))
                    || jt.getText().split("\\.").length > 1 && jt.getText().
                    split("\\.")[1].length() > 1) {
                deleteInputChar(e);
            }
        }
    }

    private void deleteInputChar(KeyEvent source) {
        source.setKeyChar((char) KeyEvent.VK_CLEAR);
    }
}
