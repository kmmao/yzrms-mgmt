/*
 * TeamMgmtPanel.java
 * 
 * Copyright(c) 2007-2016 by Yingzhi Tech
 * All Rights Reserved
 * 
 * Created at 2016-08-05 16:37:28
 */
package com.yz.rms.client.ui.team;

import com.nazca.ui.CellItem;
import com.nazca.ui.NWaitingPanel;
import com.nazca.ui.laf.border.IconLabelBorder;
import com.nazca.ui.util.CardLayoutWrapper;
import com.yz.rms.client.agent.team.DeletTeamMemberAgent;
import com.yz.rms.client.agent.team.DeleteTeamAgent;
import com.yz.rms.client.agent.team.QueryTeamMemberAgent;
import com.yz.rms.client.agent.stat.QueyTeamAgent;
import com.yz.rms.client.agent.team.SetAuthorityAgent;
import com.yz.rms.client.ui.DeleteOperationPanel;
import com.yz.rms.client.ui.SimpleOperationPanel;
import com.yz.rms.client.listener.AgentListener;
import com.yz.rms.client.model.team.MemberTableModel;
import com.yz.rms.client.renderer.MemberTableRenderer;
import com.yz.rms.client.ui.NGroupListGroupPane;
import com.yz.rms.client.ui.NGroupListNodePane;
import com.yz.rms.client.util.ResourceUtil;
import com.yz.rms.common.model.Member;
import com.yz.rms.common.model.Team;
import com.yz.rms.common.model.wrap.TeamMemberWrap;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 * 团队管理面板
 *
 * @author 赵洪坤 <zhaohongkun@yzhtech.com>
 */
public class TeamMgmtPanel extends javax.swing.JPanel {

    private IconLabelBorder leftBorder = null;
    private IconLabelBorder rightBorder = null;
    private List<Member> memberLis = null;
    private Team curTeam = null;
    private QueyTeamAgent queryTeamAgent = null;
    private SetAuthorityAgent setAuthorityAgent = null;
    private QueryTeamMemberAgent queryTeamMemberAgent = null;
    private DeleteTeamAgent deleteTeamAgent = null;
    private DeletTeamMemberAgent deletTeamMemberAgent = null;
    private CardLayoutWrapper leftCard = null;
    private CardLayoutWrapper rightCard = null;
    private long querTeamTimeSeq = 0;
    private long queryMembertimeSeq = 0;
    private MemberTableModel memberTableModel = new MemberTableModel();
    private TeamMemberWrap curMemberWrap = null;
    private final MemberTableRenderer memberTableRenderer = new MemberTableRenderer();
    private static final String NORMAL_TEAM_NAME = "普通团队";
    private static final String MANAGE_TEAM_NAME = "管理团队";
    int idexs;
    boolean isManageTeam = false;

    /**
     * Creates new form TeamMgmtPane
     */
    public TeamMgmtPanel() {
        initComponents();
        initUI();
        initModel();
        initAgentAndListener();
        initRenderer();
    }

    private void initUI() {
        leftBorder = new IconLabelBorder(getClass().getResource(
                "/com/yz/rms/client/res/32.png"), "团队列表");
        rightBorder = new IconLabelBorder(getClass().getResource(
                "/com/yz/rms/client/res/32.png"), "成员列表");
        leftPanel.setBorder(leftBorder);
        rightPanel.setBorder(rightBorder);
        leftCard = new CardLayoutWrapper(cardPanel);
        rightCard = new CardLayoutWrapper(cardPanel2);

    }

    private void initModel() {
        memberTableComp.setModel(memberTableModel);
    }

    private void initAgentAndListener() {
        queryTeamAgent = new QueyTeamAgent();
        queryTeamAgent.addListener(queryTeamAgentLis);
        queryTeamMemberAgent = new QueryTeamMemberAgent();
        queryTeamMemberAgent.addListener(queryTeamMemberAgentLis);
        deleteTeamAgent = new DeleteTeamAgent();
        deletTeamMemberAgent = new DeletTeamMemberAgent();
        setAuthorityAgent = new SetAuthorityAgent();
        memberTableComp.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    selectingTeamMember();
                }
            }
        });
    }

    private void initRenderer() {
        memberTableComp.setDefaultRenderer(Object.class, memberTableRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        refreshBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        cardPanel = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nGroupList1 = new com.nazca.ui.NGroupList();
        nWaitingPanel1 = new com.nazca.ui.NWaitingPanel();
        jPanel1 = new javax.swing.JPanel();
        leftantialiasedLabel = new com.nazca.ui.AntialiasedLabel();
        rightPanel = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        memberRefreshBtn = new javax.swing.JButton();
        memberAddBtn = new javax.swing.JButton();
        memberDeleteBtn = new javax.swing.JButton();
        setLeaderBtn = new javax.swing.JButton();
        cardPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        memberTableComp = new javax.swing.JTable();
        nWaitingPanel2 = new com.nazca.ui.NWaitingPanel();
        noContentPanel = new javax.swing.JPanel();
        rightantialiasedLabel = new com.nazca.ui.AntialiasedLabel();

        leftPanel.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/refresh_16.png"))); // NOI18N
        refreshBtn.setText("刷新");
        refreshBtn.setFocusable(false);
        refreshBtn.setInheritsPopupMenu(true);
        refreshBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(refreshBtn);

        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/add_16.png"))); // NOI18N
        addBtn.setText("添加");
        addBtn.setFocusable(false);
        addBtn.setInheritsPopupMenu(true);
        addBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(addBtn);

        updateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/update-16.png"))); // NOI18N
        updateBtn.setText("修改");
        updateBtn.setFocusable(false);
        updateBtn.setInheritsPopupMenu(true);
        updateBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(updateBtn);

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/delete_16.png"))); // NOI18N
        deleteBtn.setText("删除");
        deleteBtn.setFocusable(false);
        deleteBtn.setInheritsPopupMenu(true);
        deleteBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });
        jToolBar1.add(deleteBtn);

        leftPanel.add(jToolBar1, java.awt.BorderLayout.NORTH);

        cardPanel.setLayout(new java.awt.CardLayout());

        contentPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane1.setViewportView(nGroupList1);

        contentPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        cardPanel.add(contentPanel, "CONTENT");
        cardPanel.add(nWaitingPanel1, "WAIT");

        jPanel1.setLayout(new java.awt.BorderLayout());

        leftantialiasedLabel.setForeground(new java.awt.Color(153, 153, 153));
        leftantialiasedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        leftantialiasedLabel.setText("暂无团队信息");
        leftantialiasedLabel.setFont(leftantialiasedLabel.getFont().deriveFont(leftantialiasedLabel.getFont().getStyle() | java.awt.Font.BOLD, 20));
        jPanel1.add(leftantialiasedLabel, java.awt.BorderLayout.CENTER);

        cardPanel.add(jPanel1, "EMPTY");

        leftPanel.add(cardPanel, java.awt.BorderLayout.CENTER);

        jSplitPane1.setLeftComponent(leftPanel);

        rightPanel.setLayout(new java.awt.BorderLayout());

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        memberRefreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/refresh_16.png"))); // NOI18N
        memberRefreshBtn.setText("刷新");
        memberRefreshBtn.setFocusable(false);
        memberRefreshBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberRefreshBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(memberRefreshBtn);

        memberAddBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/add_16.png"))); // NOI18N
        memberAddBtn.setText("新增");
        memberAddBtn.setFocusable(false);
        memberAddBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberAddBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberAddBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(memberAddBtn);

        memberDeleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/delete_16.png"))); // NOI18N
        memberDeleteBtn.setText("移除");
        memberDeleteBtn.setFocusable(false);
        memberDeleteBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        memberDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memberDeleteBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(memberDeleteBtn);

        setLeaderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/yz/rms/client/res/16.png"))); // NOI18N
        setLeaderBtn.setText("设为负责人");
        setLeaderBtn.setFocusable(false);
        setLeaderBtn.setMargin(new java.awt.Insets(2, 5, 2, 5));
        setLeaderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setLeaderBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(setLeaderBtn);

        rightPanel.add(jToolBar2, java.awt.BorderLayout.NORTH);

        cardPanel2.setLayout(new java.awt.CardLayout());

        jScrollPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        memberTableComp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        memberTableComp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(memberTableComp);

        cardPanel2.add(jScrollPane3, "CONTENT");
        cardPanel2.add(nWaitingPanel2, "WAIT");

        noContentPanel.setLayout(new java.awt.BorderLayout());

        rightantialiasedLabel.setBackground(new java.awt.Color(255, 0, 51));
        rightantialiasedLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(50, 50, 50, 50));
        rightantialiasedLabel.setForeground(new java.awt.Color(153, 153, 153));
        rightantialiasedLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rightantialiasedLabel.setText("暂无团队成员信息");
        rightantialiasedLabel.setFont(rightantialiasedLabel.getFont().deriveFont(rightantialiasedLabel.getFont().getStyle() | java.awt.Font.BOLD, rightantialiasedLabel.getFont().getSize()+8));
        noContentPanel.add(rightantialiasedLabel, java.awt.BorderLayout.CENTER);

        cardPanel2.add(noContentPanel, "EMPTY");

        rightPanel.add(cardPanel2, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(rightPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        AddOrUpdateTeamPanel addTeamPane = new AddOrUpdateTeamPanel();
        addTeamPane.initPanelContent(curTeam);
        addTeamPane.setIsAdd(false);
        Team team = addTeamPane.showMe(this);
        if (team != null) {
            nGroupList1.findItem(curTeam).setT(team);//使用新的对象覆盖旧的对象达到更新list的目的
            NGroupListNodePane pan = (NGroupListNodePane) nGroupList1.getItemComponent(nGroupList1.findItem(team));
            pan.setLeftLabelText(team.getTeamName());
            nGroupList1.setSelectedGroupOrItem(nGroupList1.findItem(team));
            curTeam = team;
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        AddOrUpdateTeamPanel addTeamPane = new AddOrUpdateTeamPanel();
        addTeamPane.setIsAdd(true);
        Team team = addTeamPane.showMe(this);
        if (team != null) {
            CellItem<Team> ci = new CellItem<>(team);
            NGroupListNodePane node = new NGroupListNodePane();
            node.setLeftLabelText(team.getTeamName());
            node.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    curTeam = team;
                    memberRefreshBtnActionPerformed(null);
                }
            });
            nGroupList1.addItem(nGroupList1.findGroup(NORMAL_TEAM_NAME), ci, node, idexs++);
            nGroupList1.setSelectedGroupOrItem(nGroupList1.findItem(team));
            curTeam = team;
            leftCard.show(CardLayoutWrapper.CONTENT);
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        queryTeamAgent.start();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deleteTeamAgent.setParameter(curTeam.getTeamId());
        DeleteOperationPanel<Team> deletePane = new DeleteOperationPanel<>(deleteTeamAgent);
        deletePane.configSingleDelete("团队", curTeam.getTeamName());
        Team team = deletePane.showMe(deleteBtn, ResourceUtil.buildImageIcon("32.png"), "删除团队信息", 400, 150);
        if (team != null) {
            nGroupList1.removeGroupOrItem(nGroupList1.findItem(curTeam));
            if (!nGroupList1.getItemListByGroup(nGroupList1.findGroup(NORMAL_TEAM_NAME)).isEmpty()) {
                nGroupList1.setSelectedGroupOrItem((CellItem) nGroupList1.getItemListByGroup(nGroupList1.findGroup(NORMAL_TEAM_NAME)).get(0));
                curTeam = (Team) ((CellItem) nGroupList1.getItemListByGroup(nGroupList1.findGroup(NORMAL_TEAM_NAME)).get(0)).getT();
            } else {
                leftantialiasedLabel.setText("暂无团队信息");
                leftCard.show(CardLayoutWrapper.EMPTY);
                rightantialiasedLabel.setText("暂无团队成员信息");
                rightCard.show(CardLayoutWrapper.EMPTY);
            }
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void memberAddBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberAddBtnActionPerformed
        AddTeamMemberPanel addPanel = new AddTeamMemberPanel();
        memberLis = addPanel.showMe(this, curTeam.getTeamId());
        if (memberLis != null) {
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_memberAddBtnActionPerformed

    private void memberRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberRefreshBtnActionPerformed
        queryTeamMemberAgent.setParameter(curTeam.getTeamId());
        queryTeamMemberAgent.start();
    }//GEN-LAST:event_memberRefreshBtnActionPerformed

    private void memberDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memberDeleteBtnActionPerformed
        deletTeamMemberAgent.setParameter(curTeam.getTeamId(), curMemberWrap.getMemberId());
        DeleteOperationPanel<Member> deletePane = new DeleteOperationPanel<>(deletTeamMemberAgent);
        deletePane.configSingleDelete("成员", curMemberWrap.getEmployeeName());
        Member member = deletePane.showMe(memberDeleteBtn, ResourceUtil.buildImageIcon("32.png"), "删除成员信息", 400, 150);
        if (member != null) {
            memberRefreshBtnActionPerformed(null);
        }
    }//GEN-LAST:event_memberDeleteBtnActionPerformed

    private void setLeaderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setLeaderBtnActionPerformed
        SimpleOperationPanel<TeamMemberWrap> setAuthorityPane = new SimpleOperationPanel<>(setAuthorityAgent);
        setAuthorityPane.getOKCancelPanel().toAddButtonStyle();
        TeamMemberWrap teamMemberWrap = null;
        if (curMemberWrap.isAuthority()) {
            setAuthorityPane.configDeteleMsg(
                    "<html>确认要执行把“" + curMemberWrap.getEmployeeName() + "”设为“组员”的操作吗？</html>");
            setAuthorityAgent.setParameter(curTeam.getTeamId(), curMemberWrap.getMemberId(), false);
            teamMemberWrap = setAuthorityPane.showMe(setLeaderBtn, ResourceUtil.buildImageIcon("32.png"), "设置成员权限", 400, 150);
        } else {
            setAuthorityPane.configDeteleMsg(
                    "<html>确认要执行把“" + curMemberWrap.getEmployeeName() + "”设为“负责人”的操作吗？</html>");
            setAuthorityAgent.setParameter(curTeam.getTeamId(), curMemberWrap.getMemberId(), true);
            teamMemberWrap = setAuthorityPane.showMe(setLeaderBtn, ResourceUtil.buildImageIcon("32.png"), "设置成员权限", 400, 150);

        }
        setAuthorityAgent.start();
        if (teamMemberWrap != null) {
            memberTableModel.updateData(teamMemberWrap);
            curMemberWrap = teamMemberWrap;
            if (teamMemberWrap.isAuthority()) {
                setLeaderBtn.setText("设为组员");
            } else {
                setLeaderBtn.setText("设为负责人");
            }
            memberTableComp.repaint();
        }
    }//GEN-LAST:event_setLeaderBtnActionPerformed

    private void showTeamList(Map<String, List<Team>> map) {
        nGroupList1.clear();
        if (null != map & !map.isEmpty()) {
            //循环一级菜单
            for (Map.Entry<String, List<Team>> entrySet : map.entrySet()) {
                CellItem<String> d1 = new CellItem<>(entrySet.getKey());
                NGroupListGroupPane groupNode = new NGroupListGroupPane();
                groupNode.setLeftLabelText(d1.getT());
                groupNode.addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        rightantialiasedLabel.setText("请选择二级菜单");
                        rightCard.show(CardLayoutWrapper.EMPTY);
                        setEnable(false);
                    }

                });
                nGroupList1.addGroup(d1, groupNode, 1000);
                //循环二级
                for (Team tm : entrySet.getValue()) {
                    CellItem<Team> ci = new CellItem<>(tm);
                    NGroupListNodePane node = new NGroupListNodePane();
                    node.setLeftLabelText(tm.getTeamName());
                    node.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            curTeam = tm;
                            memberRefreshBtnActionPerformed(null);
                        }
                    });
                    nGroupList1.addItem(d1, ci, node, idexs++);
                }
            }
            if (!map.get(NORMAL_TEAM_NAME).isEmpty()) {
                nGroupList1.setSelectedGroupOrItem(nGroupList1.findItem(map.get(NORMAL_TEAM_NAME).get(0)));
                curTeam = map.get(NORMAL_TEAM_NAME).get(0);
                memberRefreshBtnActionPerformed(null);
            } else {
                nGroupList1.setSelectedGroupOrItem(nGroupList1.findItem(map.get(NORMAL_TEAM_NAME)));
            }

        }
    }

    //选择团队成员
    private void selectingTeamMember() {
        int index = memberTableComp.getSelectedRow();
        if (index >= 0) {
            index = memberTableComp.convertRowIndexToModel(index);
            curMemberWrap = memberTableModel.getData(index);
            if (curMemberWrap.isAuthority() == true) {
                setLeaderBtn.setText("设为组员");
            } else {
                setLeaderBtn.setText("设为负责人");
            }
        }
    }

    private void setEnable(boolean flag) {
        addBtn.setEnabled(flag);
        updateBtn.setEnabled(flag);
        deleteBtn.setEnabled(flag);
        memberRefreshBtn.setEnabled(flag);
        memberAddBtn.setEnabled(flag);
        memberDeleteBtn.setEnabled(flag);
        setLeaderBtn.setEnabled(flag);
        refreshBtn.setEnabled(flag);
    }

    private void setMemberBtnEnabled(boolean flag) {
        memberAddBtn.setEnabled(flag);
        memberDeleteBtn.setEnabled(flag);
        setLeaderBtn.setEnabled(flag);
        memberRefreshBtn.setEnabled(flag);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel cardPanel2;
    private javax.swing.JPanel contentPanel;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel leftPanel;
    private com.nazca.ui.AntialiasedLabel leftantialiasedLabel;
    private javax.swing.JButton memberAddBtn;
    private javax.swing.JButton memberDeleteBtn;
    private javax.swing.JButton memberRefreshBtn;
    private javax.swing.JTable memberTableComp;
    private com.nazca.ui.NGroupList nGroupList1;
    private com.nazca.ui.NWaitingPanel nWaitingPanel1;
    private com.nazca.ui.NWaitingPanel nWaitingPanel2;
    private javax.swing.JPanel noContentPanel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JPanel rightPanel;
    private com.nazca.ui.AntialiasedLabel rightantialiasedLabel;
    private javax.swing.JButton setLeaderBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
     private final AgentListener<List<Team>> queryTeamAgentLis = new AgentListener<List<Team>>() {
        @Override
        public void onStarted(long seq) {
            querTeamTimeSeq = seq;
            setEnable(false);
            nWaitingPanel1.showMsgMode("数据加载中，请稍候...", 0, NWaitingPanel.MSG_MODE_INFO);
            nWaitingPanel1.showWaitingMode();
            nWaitingPanel1.setIndeterminate(true);
            leftCard.show(CardLayoutWrapper.WAIT);
            nWaitingPanel2.showMsgMode("数据加载中，请稍候...", 0, NWaitingPanel.MSG_MODE_INFO);
            nWaitingPanel2.showWaitingMode();
            nWaitingPanel2.setIndeterminate(true);
            rightCard.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(List<Team> result, long seq) {
            nWaitingPanel1.setIndeterminate(false);
            nWaitingPanel2.setIndeterminate(false);
            Map<String, List<Team>> map = new HashMap<>();
            List<Team> manageTeamList = new ArrayList<>();
            Team team = new Team();
            team.setTeamId(Team.MANAGER_TEAM);
            team.setTeamName(MANAGE_TEAM_NAME);
            manageTeamList.add(team);
            //管理团队
            map.put(MANAGE_TEAM_NAME, manageTeamList);
            //普通团队
            map.put(NORMAL_TEAM_NAME, result);
            showTeamList(map);
            if (result != null && !result.isEmpty()) {
                leftCard.show(CardLayoutWrapper.CONTENT);
                setEnable(true);
                setMembTabBtnEnable(true);
            } else {
                leftantialiasedLabel.setText("暂无团队信息");
                leftCard.show(CardLayoutWrapper.EMPTY);
                rightantialiasedLabel.setText("暂无团队成员信息");
                rightCard.show(CardLayoutWrapper.EMPTY);
                setEnable(false);
                addBtn.setEnabled(true);
                refreshBtn.setEnabled(true);
                setMembTabBtnEnable(false);
                memberRefreshBtn.setEnabled(true);
            }
        }

        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            if (seq == querTeamTimeSeq) {
                nWaitingPanel1.setIndeterminate(false);
                nWaitingPanel1.showMsgMode(errMsg, errCode, NWaitingPanel.MSG_MODE_INFO);
                nWaitingPanel2.setIndeterminate(false);
                nWaitingPanel2.showMsgMode(errMsg, errCode, NWaitingPanel.MSG_MODE_INFO);
                setEnable(true);
                refreshBtn.setEnabled(true);
            }
        }
    };
    private final AgentListener<List<TeamMemberWrap>> queryTeamMemberAgentLis = new AgentListener<List<TeamMemberWrap>>() {
        @Override
        public void onStarted(long seq) {
            queryMembertimeSeq = seq;
            setMemberBtnEnabled(false);
            nWaitingPanel2.setIndeterminate(true);
            nWaitingPanel2.showMsgMode("数据加载中，请稍候...", 0, NWaitingPanel.MSG_MODE_INFO);
            nWaitingPanel2.showWaitingMode();
            nWaitingPanel2.setIndeterminate(true);
            rightCard.show(CardLayoutWrapper.WAIT);
        }

        @Override
        public void onSucceeded(List<TeamMemberWrap> result, long seq) {
            if (seq == queryMembertimeSeq) {
                nWaitingPanel2.setIndeterminate(false);
                setEnable(true);
                TeamMemberWrap comparator = new TeamMemberWrap();
                Collections.sort(result, comparator);
                memberTableModel.setDatas(result);
                if (nGroupList1.getItemListByGroup(nGroupList1.findGroup(NORMAL_TEAM_NAME)).isEmpty()) {
                    updateBtn.setEnabled(false);
                    deleteBtn.setEnabled(false);
                    memberAddBtn.setEnabled(false);
                    memberDeleteBtn.setEnabled(false);
                    setLeaderBtn.setEnabled(false);
                }
                if (!result.isEmpty()) {
                    rightCard.show(CardLayoutWrapper.CONTENT);
                    memberTableComp.getSelectionModel().setSelectionInterval(0, 0);
                } else {
                    rightantialiasedLabel.setText("暂无团队成员信息");
                    rightCard.show(CardLayoutWrapper.EMPTY);
                    memberDeleteBtn.setEnabled(false);
                    setLeaderBtn.setEnabled(false);
                }
                //判断点击的团队是不是管理团队，设置相应的按钮的启用
                if (curTeam.getTeamId().equals(Team.MANAGER_TEAM)) {
                    setManageTeamBtnEnable(false);
                }
            }
        }

        @Override
        public void onFailed(String errMsg, int errCode, long seq) {
            if (seq == queryMembertimeSeq) {
                setEnable(true);
                nWaitingPanel2.setIndeterminate(false);
                nWaitingPanel2.showMsgMode(errMsg, errCode, NWaitingPanel.MSG_MODE_INFO);
                setMembTabBtnEnable(true);
            }
        }
    };

    private void setManageTeamBtnEnable(boolean flag) {
        addBtn.setEnabled(flag);
        updateBtn.setEnabled(flag);
        deleteBtn.setEnabled(flag);
        memberAddBtn.setEnabled(flag);
        memberDeleteBtn.setEnabled(flag);
        setLeaderBtn.setEnabled(flag);
    }

    private void setMembTabBtnEnable(boolean flag) {
        memberRefreshBtn.setEnabled(flag);
        memberAddBtn.setEnabled(flag);
        memberDeleteBtn.setEnabled(flag);
        setLeaderBtn.setEnabled(flag);
    }

    public void onInit() {
        queryTeamAgent.start();
    }
}
